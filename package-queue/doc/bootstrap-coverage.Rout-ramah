# These results were obtained using a pre-release version of rscala 2.3.1 on my
# "ramah" workstation.  It was running Ubuntu 16.04.3 LTS (GNU/Linux
# 4.4.0-89-generic x86_64) with an Intel(R) processor (with 4 physical cores
# and two virtual cores per physical core) and 64 GB of RAM.  R was compiled
# from source.  Scala 2.12.3 and Java 8 were used.  The machine was otherwise
# idle during the run.

R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #### Code for Section 4. "Case Study: Simulation Study Accelerated with rscala"
> 
> makeConfidenceInterval <- function(p, n) {
+   me <- qnorm(0.975) * sqrt( p * ( 1 - p ) / n )
+   c(estimate = p, lower = p - me, upper = p + me)
+ }
> 
> prob1   <- 0.75
> prob2   <- 0.35
> truth   <- qnorm(prob1) / qnorm(prob2)
> n       <- 100
> alpha   <- 0.05
> 
> 
> #### rscala implementation #1
> 
> library(rscala)
> s <- scala()
> 
> coverage.rscala1 <- function(sampler=NULL, n=0L, truth=0, prob1=0.0, prob2=0.0,
+                              nSamples=1000L, alpha=0.05, nIntervals=1000L) {
+   coverage <- s %!% '
+     import scala.util.Random
+     import scala.concurrent.{Await, Future}
+     import scala.concurrent.ExecutionContext.Implicits.global
+ 
+     def quantile(sorted: Array[Double], p: Double) = {
+       val i = ((sorted.length-1)*p).asInstanceOf[Int]
+       val delta = (sorted.length-1)*p - i
+       ( 1 - delta ) * sorted(i) + delta * sorted(i+1)
+     }
+ 
+     def statistic(x: Array[Double]) = {
+       scala.util.Sorting.quickSort(x)
+       quantile(x,prob1) / quantile(x,prob2)
+     }
+ 
+     def resample(x: Array[Double], rng: Random) = Array.fill(x.length) {
+       x(rng.nextInt(x.length))
+     }
+ 
+     def ciContains(x: Array[Double], rng: Random) = {
+       val bs = Array.fill(nSamples) { statistic(resample(x, rng)) }
+       scala.util.Sorting.quickSort(bs)
+       ( quantile(bs, alpha/2) <= truth ) && ( truth <= quantile(bs, 1-alpha/2) )
+     }
+ 
+     Await.result( Future.sequence( List.fill(nIntervals) {
+       val dataset = R.invokeD1(sampler, n)
+       val rng = new Random(R.invokeI0("runif", 1, -Int.MaxValue, Int.MaxValue))
+       Future { ciContains(dataset, rng) }
+     }), concurrent.duration.Duration.Inf).count(identity) / nIntervals.toDouble
+   '
+   makeConfidenceInterval(coverage, nIntervals)
+ }
> 
> 
> #### All of the remaining implementation use the parallel package.
> 
> library(parallel)
> cluster <- makeCluster(detectCores())
> 
> 
> #### rscala implementation #2
> 
> clusterEvalQ(cluster, {
+   library(rscala)
+   s <- scala()
+   ciContains.rscala2 <- function(sampler=NULL, n=0L, truth=0, prob1=0.0, prob2=0.0,
+                                  nSamples=1000L, alpha=0.05) {
+     s %!% '
+       def quantile(sorted: Array[Double], p: Double) = {
+         val i = ((sorted.length-1)*p).asInstanceOf[Int]
+         val delta = (sorted.length-1)*p - i
+         ( 1 - delta ) * sorted(i) + delta * sorted(i+1)
+       }
+ 
+       def statistic(x: Array[Double]) = {
+         scala.util.Sorting.quickSort(x)
+         quantile(x,prob1) / quantile(x,prob2)
+       }
+ 
+       def resample(x: Array[Double], rng: scala.util.Random) = Array.fill(x.length) {
+         x(rng.nextInt(x.length))
+       }
+ 
+       val x = R.invokeD1(sampler, n)
+       val rng = new scala.util.Random(R.invokeI0("runif", 1, -Int.MaxValue, Int.MaxValue))
+       val bs = Array.fill(nSamples) { statistic(resample(x, rng)) }
+       scala.util.Sorting.quickSort(bs)
+       ( quantile(bs, alpha/2) <= truth ) && ( truth <= quantile(bs, 1-alpha/2) )
+     '
+   }
+ })
[[1]]
function (sampler = NULL, n = 0L, truth = 0, prob1 = 0, prob2 = 0, 
    nSamples = 1000L, alpha = 0.05) 
{
    s %!% "\\n      def quantile(sorted: Array[Double], p: Double) = {\\n        val i = ((sorted.length-1)*p).asInstanceOf[Int]\\n        val delta = (sorted.length-1)*p - i\\n        ( 1 - delta ) * sorted(i) + delta * sorted(i+1)\\n      }\\n\\n      def statistic(x: Array[Double]) = {\\n        scala.util.Sorting.quickSort(x)\\n        quantile(x,prob1) / quantile(x,prob2)\\n      }\\n\\n      def resample(x: Array[Double], rng: scala.util.Random) = Array.fill(x.length) {\\n        x(rng.nextInt(x.length))\\n      }\\n\\n      val x = R.invokeD1(sampler, n)\\n      val rng = new scala.util.Random(R.invokeI0(\\"runif\\", 1, -Int.MaxValue, Int.MaxValue))\\n      val bs = Array.fill(nSamples) { statistic(resample(x, rng)) }\\n      scala.util.Sorting.quickSort(bs)\\n      ( quantile(bs, alpha/2) <= truth ) && ( truth <= quantile(bs, 1-alpha/2) )\\n    "
}

[[2]]
function (sampler = NULL, n = 0L, truth = 0, prob1 = 0, prob2 = 0, 
    nSamples = 1000L, alpha = 0.05) 
{
    s %!% "\\n      def quantile(sorted: Array[Double], p: Double) = {\\n        val i = ((sorted.length-1)*p).asInstanceOf[Int]\\n        val delta = (sorted.length-1)*p - i\\n        ( 1 - delta ) * sorted(i) + delta * sorted(i+1)\\n      }\\n\\n      def statistic(x: Array[Double]) = {\\n        scala.util.Sorting.quickSort(x)\\n        quantile(x,prob1) / quantile(x,prob2)\\n      }\\n\\n      def resample(x: Array[Double], rng: scala.util.Random) = Array.fill(x.length) {\\n        x(rng.nextInt(x.length))\\n      }\\n\\n      val x = R.invokeD1(sampler, n)\\n      val rng = new scala.util.Random(R.invokeI0(\\"runif\\", 1, -Int.MaxValue, Int.MaxValue))\\n      val bs = Array.fill(nSamples) { statistic(resample(x, rng)) }\\n      scala.util.Sorting.quickSort(bs)\\n      ( quantile(bs, alpha/2) <= truth ) && ( truth <= quantile(bs, 1-alpha/2) )\\n    "
}

[[3]]
function (sampler = NULL, n = 0L, truth = 0, prob1 = 0, prob2 = 0, 
    nSamples = 1000L, alpha = 0.05) 
{
    s %!% "\\n      def quantile(sorted: Array[Double], p: Double) = {\\n        val i = ((sorted.length-1)*p).asInstanceOf[Int]\\n        val delta = (sorted.length-1)*p - i\\n        ( 1 - delta ) * sorted(i) + delta * sorted(i+1)\\n      }\\n\\n      def statistic(x: Array[Double]) = {\\n        scala.util.Sorting.quickSort(x)\\n        quantile(x,prob1) / quantile(x,prob2)\\n      }\\n\\n      def resample(x: Array[Double], rng: scala.util.Random) = Array.fill(x.length) {\\n        x(rng.nextInt(x.length))\\n      }\\n\\n      val x = R.invokeD1(sampler, n)\\n      val rng = new scala.util.Random(R.invokeI0(\\"runif\\", 1, -Int.MaxValue, Int.MaxValue))\\n      val bs = Array.fill(nSamples) { statistic(resample(x, rng)) }\\n      scala.util.Sorting.quickSort(bs)\\n      ( quantile(bs, alpha/2) <= truth ) && ( truth <= quantile(bs, 1-alpha/2) )\\n    "
}

[[4]]
function (sampler = NULL, n = 0L, truth = 0, prob1 = 0, prob2 = 0, 
    nSamples = 1000L, alpha = 0.05) 
{
    s %!% "\\n      def quantile(sorted: Array[Double], p: Double) = {\\n        val i = ((sorted.length-1)*p).asInstanceOf[Int]\\n        val delta = (sorted.length-1)*p - i\\n        ( 1 - delta ) * sorted(i) + delta * sorted(i+1)\\n      }\\n\\n      def statistic(x: Array[Double]) = {\\n        scala.util.Sorting.quickSort(x)\\n        quantile(x,prob1) / quantile(x,prob2)\\n      }\\n\\n      def resample(x: Array[Double], rng: scala.util.Random) = Array.fill(x.length) {\\n        x(rng.nextInt(x.length))\\n      }\\n\\n      val x = R.invokeD1(sampler, n)\\n      val rng = new scala.util.Random(R.invokeI0(\\"runif\\", 1, -Int.MaxValue, Int.MaxValue))\\n      val bs = Array.fill(nSamples) { statistic(resample(x, rng)) }\\n      scala.util.Sorting.quickSort(bs)\\n      ( quantile(bs, alpha/2) <= truth ) && ( truth <= quantile(bs, 1-alpha/2) )\\n    "
}

[[5]]
function (sampler = NULL, n = 0L, truth = 0, prob1 = 0, prob2 = 0, 
    nSamples = 1000L, alpha = 0.05) 
{
    s %!% "\\n      def quantile(sorted: Array[Double], p: Double) = {\\n        val i = ((sorted.length-1)*p).asInstanceOf[Int]\\n        val delta = (sorted.length-1)*p - i\\n        ( 1 - delta ) * sorted(i) + delta * sorted(i+1)\\n      }\\n\\n      def statistic(x: Array[Double]) = {\\n        scala.util.Sorting.quickSort(x)\\n        quantile(x,prob1) / quantile(x,prob2)\\n      }\\n\\n      def resample(x: Array[Double], rng: scala.util.Random) = Array.fill(x.length) {\\n        x(rng.nextInt(x.length))\\n      }\\n\\n      val x = R.invokeD1(sampler, n)\\n      val rng = new scala.util.Random(R.invokeI0(\\"runif\\", 1, -Int.MaxValue, Int.MaxValue))\\n      val bs = Array.fill(nSamples) { statistic(resample(x, rng)) }\\n      scala.util.Sorting.quickSort(bs)\\n      ( quantile(bs, alpha/2) <= truth ) && ( truth <= quantile(bs, 1-alpha/2) )\\n    "
}

[[6]]
function (sampler = NULL, n = 0L, truth = 0, prob1 = 0, prob2 = 0, 
    nSamples = 1000L, alpha = 0.05) 
{
    s %!% "\\n      def quantile(sorted: Array[Double], p: Double) = {\\n        val i = ((sorted.length-1)*p).asInstanceOf[Int]\\n        val delta = (sorted.length-1)*p - i\\n        ( 1 - delta ) * sorted(i) + delta * sorted(i+1)\\n      }\\n\\n      def statistic(x: Array[Double]) = {\\n        scala.util.Sorting.quickSort(x)\\n        quantile(x,prob1) / quantile(x,prob2)\\n      }\\n\\n      def resample(x: Array[Double], rng: scala.util.Random) = Array.fill(x.length) {\\n        x(rng.nextInt(x.length))\\n      }\\n\\n      val x = R.invokeD1(sampler, n)\\n      val rng = new scala.util.Random(R.invokeI0(\\"runif\\", 1, -Int.MaxValue, Int.MaxValue))\\n      val bs = Array.fill(nSamples) { statistic(resample(x, rng)) }\\n      scala.util.Sorting.quickSort(bs)\\n      ( quantile(bs, alpha/2) <= truth ) && ( truth <= quantile(bs, 1-alpha/2) )\\n    "
}

[[7]]
function (sampler = NULL, n = 0L, truth = 0, prob1 = 0, prob2 = 0, 
    nSamples = 1000L, alpha = 0.05) 
{
    s %!% "\\n      def quantile(sorted: Array[Double], p: Double) = {\\n        val i = ((sorted.length-1)*p).asInstanceOf[Int]\\n        val delta = (sorted.length-1)*p - i\\n        ( 1 - delta ) * sorted(i) + delta * sorted(i+1)\\n      }\\n\\n      def statistic(x: Array[Double]) = {\\n        scala.util.Sorting.quickSort(x)\\n        quantile(x,prob1) / quantile(x,prob2)\\n      }\\n\\n      def resample(x: Array[Double], rng: scala.util.Random) = Array.fill(x.length) {\\n        x(rng.nextInt(x.length))\\n      }\\n\\n      val x = R.invokeD1(sampler, n)\\n      val rng = new scala.util.Random(R.invokeI0(\\"runif\\", 1, -Int.MaxValue, Int.MaxValue))\\n      val bs = Array.fill(nSamples) { statistic(resample(x, rng)) }\\n      scala.util.Sorting.quickSort(bs)\\n      ( quantile(bs, alpha/2) <= truth ) && ( truth <= quantile(bs, 1-alpha/2) )\\n    "
}

[[8]]
function (sampler = NULL, n = 0L, truth = 0, prob1 = 0, prob2 = 0, 
    nSamples = 1000L, alpha = 0.05) 
{
    s %!% "\\n      def quantile(sorted: Array[Double], p: Double) = {\\n        val i = ((sorted.length-1)*p).asInstanceOf[Int]\\n        val delta = (sorted.length-1)*p - i\\n        ( 1 - delta ) * sorted(i) + delta * sorted(i+1)\\n      }\\n\\n      def statistic(x: Array[Double]) = {\\n        scala.util.Sorting.quickSort(x)\\n        quantile(x,prob1) / quantile(x,prob2)\\n      }\\n\\n      def resample(x: Array[Double], rng: scala.util.Random) = Array.fill(x.length) {\\n        x(rng.nextInt(x.length))\\n      }\\n\\n      val x = R.invokeD1(sampler, n)\\n      val rng = new scala.util.Random(R.invokeI0(\\"runif\\", 1, -Int.MaxValue, Int.MaxValue))\\n      val bs = Array.fill(nSamples) { statistic(resample(x, rng)) }\\n      scala.util.Sorting.quickSort(bs)\\n      ( quantile(bs, alpha/2) <= truth ) && ( truth <= quantile(bs, 1-alpha/2) )\\n    "
}

> 
> coverage.rscala2 <- function(sampler, n, truth, prob1, prob2, nSamples, alpha, nIntervals) {
+   clusterExport(cluster, c("sampler","n","truth","prob1","prob2","nSamples","alpha"),
+     envir=environment())
+   coverage <- mean(parSapply(cluster, 1:nIntervals, function(i) {
+     ciContains.rscala2(sampler, n, truth, prob1, prob2, nSamples, alpha)
+   }))
+   makeConfidenceInterval(coverage, nIntervals)
+ }
> 
> 
> #### Pure R implementation
> 
> coverage.pureR <- function(sampler, n, truth, prob1, prob2, nSamples, alpha, nIntervals) {
+   statistic <- function(x) {
+     q <- quantile(x, probs = c(prob1, prob2))
+     q[1] / q[2]
+   }
+   ciContains.pureR <- function(x) {
+     samples <- sapply(1:nSamples, function(i) {
+       statistic(sample(x, replace=TRUE))
+     })
+     ci <- quantile(samples, probs = c(alpha/2, 1-alpha/2))
+     ( ci[1] <= truth ) && ( truth <= ci[2] )
+   }
+   clusterExport(cluster, c("sampler","n","truth","prob1","prob2","nSamples","alpha"),
+     envir = environment())
+   coverage <- mean(parSapply(cluster, 1:nIntervals, function(i) {
+     ciContains.pureR(sampler(n))
+   }))
+   makeConfidenceInterval(coverage, nIntervals)
+ }
> 
> 
> #### Rcpp implementation
> 
> clusterEvalQ(cluster, { # Don't count compile timing when benchmarking Rcpp.
+   library(Rcpp)
+   sourceCpp(code="
+     #include <Rcpp.h>
+     using namespace Rcpp;
+ 
+     double quantile(double *sorted, int length, double p) {
+       int i = (int) ((length-1)*p);
+       double delta = (length-1)*p - i;
+       return ( 1 - delta ) * sorted[i] + delta * sorted[i+1];
+     }
+ 
+     int compare_double(const void* a, const void* b) {
+       double aa = *(double*)a;
+       double bb = *(double*)b;
+       if ( aa == bb ) return 0;
+       return aa < bb ? -1 : 1;
+     }
+ 
+     double statistic(double *x, int length, double prob1, double prob2) {
+       qsort(x, length, sizeof(double), compare_double);
+       return quantile(x, length, prob1) / quantile(x, length, prob2);
+     }
+ 
+     double *resample(double *x, int length) {
+       double *y = (double*) malloc(length*sizeof(double));
+       for ( int i=0; i<length; i++ ) y[i] = x[(int)(Rf_runif(0,1)*length)];
+       return y;
+     }
+ 
+     // [[Rcpp::export]]
+     bool ciContains(NumericVector data, double truth,
+                     double prob1, double prob2, int nSamples, double alpha) {
+       double *y = (double*) malloc(nSamples*sizeof(double));
+       for ( int i=0; i<nSamples; i++ ) {
+         int length = data.size();
+         double *z = resample(data.begin(), length);
+         y[i] = statistic(z, length, prob1, prob2);
+         free(z);
+       }
+       qsort(y, nSamples, sizeof(double), compare_double);
+       bool result =  ( quantile(y, nSamples,   alpha/2) <= truth ) &&
+                      ( quantile(y, nSamples, 1-alpha/2) >= truth );
+       free(y);
+       return result;
+     }
+   ")
+ })
[[1]]
[[1]]$functions
[1] "ciContains"

[[1]]$modules
character(0)

[[1]]$cppSourcePath
[1] "/tmp/RtmpFVYdNj/sourceCpp-x86_64-pc-linux-gnu-0.12.12/file99217176485.cpp"

[[1]]$buildDirectory
[1] "/tmp/RtmpFVYdNj/sourceCpp-x86_64-pc-linux-gnu-0.12.12/sourcecpp_99228c904cb"


[[2]]
[[2]]$functions
[1] "ciContains"

[[2]]$modules
character(0)

[[2]]$cppSourcePath
[1] "/tmp/RtmpZjkBrx/sourceCpp-x86_64-pc-linux-gnu-0.12.12/file99b597f516c.cpp"

[[2]]$buildDirectory
[1] "/tmp/RtmpZjkBrx/sourceCpp-x86_64-pc-linux-gnu-0.12.12/sourcecpp_99b51e708a6"


[[3]]
[[3]]$functions
[1] "ciContains"

[[3]]$modules
character(0)

[[3]]$cppSourcePath
[1] "/tmp/RtmpJYD7nL/sourceCpp-x86_64-pc-linux-gnu-0.12.12/file9a45e0c35eb.cpp"

[[3]]$buildDirectory
[1] "/tmp/RtmpJYD7nL/sourceCpp-x86_64-pc-linux-gnu-0.12.12/sourcecpp_9a43e7fc3cb"


[[4]]
[[4]]$functions
[1] "ciContains"

[[4]]$modules
character(0)

[[4]]$cppSourcePath
[1] "/tmp/RtmpM7xlKJ/sourceCpp-x86_64-pc-linux-gnu-0.12.12/file9ad7b8375e8.cpp"

[[4]]$buildDirectory
[1] "/tmp/RtmpM7xlKJ/sourceCpp-x86_64-pc-linux-gnu-0.12.12/sourcecpp_9ad7e4a2588"


[[5]]
[[5]]$functions
[1] "ciContains"

[[5]]$modules
character(0)

[[5]]$cppSourcePath
[1] "/tmp/RtmpQOkyiT/sourceCpp-x86_64-pc-linux-gnu-0.12.12/file9b626cf04b.cpp"

[[5]]$buildDirectory
[1] "/tmp/RtmpQOkyiT/sourceCpp-x86_64-pc-linux-gnu-0.12.12/sourcecpp_9b6313578c"


[[6]]
[[6]]$functions
[1] "ciContains"

[[6]]$modules
character(0)

[[6]]$cppSourcePath
[1] "/tmp/RtmpsC44Z3/sourceCpp-x86_64-pc-linux-gnu-0.12.12/file9bf459c8021.cpp"

[[6]]$buildDirectory
[1] "/tmp/RtmpsC44Z3/sourceCpp-x86_64-pc-linux-gnu-0.12.12/sourcecpp_9bf165cff3f"


[[7]]
[[7]]$functions
[1] "ciContains"

[[7]]$modules
character(0)

[[7]]$cppSourcePath
[1] "/tmp/RtmpeBcNTd/sourceCpp-x86_64-pc-linux-gnu-0.12.12/file9c842452bc4.cpp"

[[7]]$buildDirectory
[1] "/tmp/RtmpeBcNTd/sourceCpp-x86_64-pc-linux-gnu-0.12.12/sourcecpp_9c854b2a7a1"


[[8]]
[[8]]$functions
[1] "ciContains"

[[8]]$modules
character(0)

[[8]]$cppSourcePath
[1] "/tmp/Rtmp27lHLt/sourceCpp-x86_64-pc-linux-gnu-0.12.12/file9d138ef1c84.cpp"

[[8]]$buildDirectory
[1] "/tmp/Rtmp27lHLt/sourceCpp-x86_64-pc-linux-gnu-0.12.12/sourcecpp_9d1664b53d0"


> 
> coverage.Rcpp <- function(sampler, n, truth, prob1, prob2, nSamples, alpha, nIntervals) {
+   clusterExport(cluster, c("sampler","n","truth","prob1","prob2","nSamples","alpha"),
+     envir=environment())
+   coverage <- mean(parSapply(cluster, 1:nIntervals, function(i) {
+     ciContains(sampler(n), truth, prob1, prob2, nSamples, alpha)
+   }))
+   makeConfidenceInterval(coverage, nIntervals)
+ }
> 
> 
> #### Benchmarks
> 
> library(microbenchmark)
> engine <- function(nSamples, nIntervals) microbenchmark(
+   pureR.   = coverage.pureR(  rnorm, n, truth, prob1, prob2, nSamples, alpha, nIntervals),
+   Rcpp.    = coverage.Rcpp(   rnorm, n, truth, prob1, prob2, nSamples, alpha, nIntervals),
+   rscala1. = coverage.rscala1(rnorm, n, truth, prob1, prob2, nSamples, alpha, nIntervals),
+   rscala2. = coverage.rscala2(rnorm, n, truth, prob1, prob2, nSamples, alpha, nIntervals),
+   times=10)
> 
> engine(nSamples = 10000L, nIntervals = 10000L)
Unit: seconds
     expr        min         lq       mean     median         uq        max
   pureR. 1858.08094 1863.94757 1875.87959 1867.88017 1878.92269 1943.83684
    Rcpp.  105.14806  105.30434  107.33559  105.64760  106.46855  118.64795
 rscala1.   81.78469   81.99415   82.48997   82.18813   82.47988   84.82548
 rscala2.   70.19601   70.39950   71.36919   70.66761   70.85547   77.89727
 neval
    10
    10
    10
    10
> 
> proc.time()
     user    system   elapsed 
   69.952    10.220 21395.425 
