
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> library(microbenchmark)
> 
> cat(system2("hostname",stdout=TRUE),"\n",sep="")
ramah
> scalaConfig()
Read existing configuration file: ~/.rscala/config.R

$scalaCmd
[1] "/home/dahl/local/bin/scala"

$scalaMajorVersion
[1] "2.12"

$scalaFullVersion
[1] "2.12.6"

$javaCmd
[1] "/home/dahl/local/bin/java"

$javaMajorVersion
[1] 8

$javaArchitecture
[1] 64

$osArchitecture
[1] 64

> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.5 LTS

Matrix products: default
BLAS: /usr/lib/libblas/libblas.so.3.6.0
LAPACK: /usr/lib/lapack/liblapack.so.3.6.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] microbenchmark_1.4-4 rscala_3.2.0        

loaded via a namespace (and not attached):
[1] compiler_3.5.1
> 
> scala()
> nReps <- 10000
> 
> #####
> 
> rng <- s$.new_scala.util.Random()
> rng$nextInt()      # First-time compilation
[1] 1348008693
> rng$nextInt(1L)    # First-time compilation
[1] 0
> nextInt <- rng$nextInt
> nextInt()          # Alreary compiled
[1] -1843807394
> nextInt(1L)        # Alreary compiled
[1] 0
> 
> microbenchmark(
+   s(rng=rng) ^ 'rng.nextInt()',
+   s(rng=rng) * 'rng.nextInt()',
+   rng$.nextInt(),
+   rng$nextInt(),
+   nextInt(),
+   rng$.nextInt(100L),
+   rng$nextInt(100L),
+   nextInt(100L),
+   times=nReps
+ )
Unit: microseconds
                           expr     min       lq     mean   median       uq
   s(rng = rng)^"rng.nextInt()" 160.859 174.4735 226.9762 178.6995 183.7970
 s(rng = rng) * "rng.nextInt()" 121.628 134.4855 148.0910 138.3945 142.7965
                 rng$.nextInt() 132.467 144.6110 159.1804 148.0415 151.7080
                  rng$nextInt() 103.517 109.2890 120.6051 111.4930 115.1345
                      nextInt()  91.040  97.8670 108.8589 100.5685 103.7590
             rng$.nextInt(100L) 149.156 166.8525 181.9316 170.3895 174.2000
              rng$nextInt(100L) 114.388 130.8900 142.5481 133.1890 136.8985
                  nextInt(100L) 101.319 119.6045 131.5553 122.3160 125.7740
        max neval
 369556.399 10000
  15028.645 10000
   2183.527 10000
   4515.645 10000
   9053.199 10000
   4096.888 10000
   3524.431 10000
  17344.862 10000
> 
> proc.time()
   user  system elapsed 
  8.184   3.948  16.361 
