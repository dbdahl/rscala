
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> library(microbenchmark)
> 
> cat(system2("hostname",stdout=TRUE),"\n",sep="")
ramah
> scalaConfig()
Read existing configuration file: ~/.rscala/config.R

$scalaCmd
[1] "~/.rscala/scala/bin/scala"

$scalaMajorVersion
[1] "2.12"

$scalaFullVersion
[1] "2.12.6"

$javaCmd
[1] "~/.rscala/java/bin/java"

$javaMajorVersion
[1] 8

$javaArchitecture
[1] 64

$osArchitecture
[1] 64

> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.5 LTS

Matrix products: default
BLAS: /usr/lib/libblas/libblas.so.3.6.0
LAPACK: /usr/lib/lapack/liblapack.so.3.6.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] microbenchmark_1.4-4 rscala_3.2.0        

loaded via a namespace (and not attached):
[1] compiler_3.5.1
> 
> s <- scala()
> nReps <- 10000
> 
> #####
> 
> rng <- s$.new_scala.util.Random()
> rng$nextInt()      # First-time compilation
[1] -1038211348
> rng$nextInt(1L)    # First-time compilation
[1] 0
> nextInt <- rng$nextInt
> nextInt()          # Alreary compiled
[1] -959679704
> nextInt(1L)        # Alreary compiled
[1] 0
> 
> microbenchmark(
+   s(rng=rng) ^ 'rng.nextInt()',
+   s(rng=rng) * 'rng.nextInt()',
+   rng$.nextInt(),
+   rng$nextInt(),
+   nextInt(),
+   rng$.nextInt(100L),
+   rng$nextInt(100L),
+   nextInt(100L),
+   times=nReps
+ )
Unit: microseconds
                           expr     min       lq     mean   median       uq
   s(rng = rng)^"rng.nextInt()" 160.748 176.9970 232.1286 182.1405 217.9960
 s(rng = rng) * "rng.nextInt()" 123.463 135.5600 154.3175 140.1125 167.6410
                 rng$.nextInt() 134.290 146.9120 167.7797 151.7515 180.8885
                  rng$nextInt()  99.953 110.9440 126.1054 113.7340 135.7155
                      nextInt()  91.812  99.4365 113.5313 102.6605 123.0115
             rng$.nextInt(100L) 152.966 169.6525 194.5088 174.3830 209.3250
              rng$nextInt(100L) 115.662 132.7365 151.6708 135.7630 163.5295
                  nextInt(100L) 102.891 121.3735 138.0916 124.6275 151.5120
        max neval
 310166.100 10000
   2129.957 10000
   4936.082 10000
   1750.446 10000
   2165.509 10000
  14812.796 10000
   3609.586 10000
   2142.732 10000
> 
> proc.time()
   user  system elapsed 
  8.740   4.048  17.001 
