
R version 3.5.0 (2018-04-23) -- "Joy in Playing"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> library(microbenchmark)
> 
> cat(system2("hostname",stdout=TRUE),"\n",sep="")
ramah
> scalaInfo()

Search details:
    SCALA_HOME environment variable is not set.
    Looking for Scala using PATH environment variable.
    Found 'scala' at /home/dahl/local/scala/scala/scala-2.12.6/bin/scala.

$cmd
[1] "/home/dahl/local/scala/scala/scala-2.12.6/bin/scala"

$fullVersion
[1] "2.12.6"

$majorVersion
[1] "2.12"

> sessionInfo()
R version 3.5.0 (2018-04-23)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/lib/libblas/libblas.so.3.6.0
LAPACK: /usr/lib/lapack/liblapack.so.3.6.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] microbenchmark_1.4-4 rscala_3.1.0        

loaded via a namespace (and not attached):
[1] compiler_3.5.0
> 
> scala()
> nReps <- 10000
> 
> #####
> 
> rng <- s$.new_scala.util.Random()
> rng$nextInt()      # First-time compilation
[1] -808516746
> rng$nextInt(1L)    # First-time compilation
[1] 0
> nextInt <- rng$nextInt
> nextInt()          # Alreary compiled
[1] -1075481023
> nextInt(1L)        # Alreary compiled
[1] 0
> 
> microbenchmark(
+   s(rng=rng) ^ 'rng.nextInt()',
+   s(rng=rng) * 'rng.nextInt()',
+   rng$.nextInt(),
+   rng$nextInt(),
+   nextInt(),
+   rng$.nextInt(100L),
+   rng$nextInt(100L),
+   nextInt(100L),
+   times=nReps
+ )
Unit: microseconds
                           expr     min       lq     mean   median       uq
   s(rng = rng)^"rng.nextInt()" 150.125 178.0310 224.2803 180.8635 194.4460
 s(rng = rng) * "rng.nextInt()" 114.907 139.2480 154.1510 141.5260 151.1940
                 rng$.nextInt() 131.101 144.7485 163.5066 147.5930 172.4000
                  rng$nextInt() 100.807 110.6620 124.2151 112.4420 124.3000
                      nextInt()  90.600 100.1830 112.6292 102.4020 112.2610
             rng$.nextInt(100L) 141.883 165.7015 187.4541 168.8365 197.6600
              rng$nextInt(100L) 110.945 131.4235 147.3682 133.5915 141.8665
                  nextInt(100L) 100.698 120.8885 135.6540 123.4140 131.1945
        max neval
 258846.912 10000
   3585.397 10000
   4664.093 10000
   3712.266 10000
   2296.801 10000
  15053.805 10000
   8887.438 10000
   2054.492 10000
> 
> proc.time()
   user  system elapsed 
  8.212   4.340  16.567 
