
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> library(microbenchmark)
> 
> cat(system2("hostname",stdout=TRUE),"\n",sep="")
ramah
> scalaConfig()
Read existing configuration file: ~/.rscala/config.R

$scalaCmd
[1] "~/.rscala/scala/bin/scala"

$scalaMajorVersion
[1] "2.12"

$scalaFullVersion
[1] "2.12.6"

$javaCmd
[1] "~/.rscala/java/bin/java"

$javaMajorVersion
[1] 8

$javaArchitecture
[1] 64

$osArchitecture
[1] 64

> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.5 LTS

Matrix products: default
BLAS: /usr/lib/libblas/libblas.so.3.6.0
LAPACK: /usr/lib/lapack/liblapack.so.3.6.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] microbenchmark_1.4-4 rscala_3.2.0        

loaded via a namespace (and not attached):
[1] compiler_3.5.1
> 
> s <- scala()
> nReps <- 10000
> 
> #####
> 
> rng <- s$.new_scala.util.Random()
> rng$nextInt()      # First-time compilation
[1] -957704280
> rng$nextInt(1L)    # First-time compilation
[1] 0
> nextInt <- rng$nextInt
> nextInt()          # Alreary compiled
[1] -1596479390
> nextInt(1L)        # Alreary compiled
[1] 0
> 
> microbenchmark(
+   s(rng=rng) ^ 'rng.nextInt()',
+   s(rng=rng) * 'rng.nextInt()',
+   rng$.nextInt(),
+   rng$nextInt(),
+   nextInt(),
+   rng$.nextInt(100L),
+   rng$nextInt(100L),
+   nextInt(100L),
+   times=nReps
+ )
Unit: microseconds
                           expr     min       lq     mean   median       uq
   s(rng = rng)^"rng.nextInt()" 158.442 178.7880 200.7182 183.7820 219.6355
 s(rng = rng) * "rng.nextInt()" 117.857 138.0885 186.6514 142.5505 166.0640
                 rng$.nextInt() 133.982 148.0485 168.6569 151.5540 180.8350
                  rng$nextInt() 103.706 111.4630 126.0786 115.3100 136.0565
                      nextInt()  88.772  99.9225 114.1122 103.4245 121.1435
             rng$.nextInt(100L) 146.157 170.4340 193.3494 173.7415 208.6915
              rng$nextInt(100L) 116.165 132.7140 150.8638 136.8390 160.9775
                  nextInt(100L) 103.666 121.3620 140.9132 125.2375 147.9025
        max neval
   1784.224 10000
 316457.400 10000
   4285.187 10000
   1709.739 10000
   2146.498 10000
   3613.589 10000
  15252.501 10000
  15138.083 10000
> 
> proc.time()
   user  system elapsed 
  8.680   4.152  16.945 
