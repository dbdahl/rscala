
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> library(microbenchmark)
> 
> cat(system2("hostname",stdout=TRUE),"\n",sep="")
ramah
> scalaInfo()

Search details:
    SCALA_HOME environment variable is not set.
    Looking for Scala using PATH environment variable.
    Found 'scala' at /home/dahl/local/scala/scala/scala-2.12.6/bin/scala.

$cmd
[1] "/home/dahl/local/scala/scala/scala-2.12.6/bin/scala"

$fullVersion
[1] "2.12.6"

$majorVersion
[1] "2.12"

> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.5 LTS

Matrix products: default
BLAS: /usr/lib/libblas/libblas.so.3.6.0
LAPACK: /usr/lib/lapack/liblapack.so.3.6.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] microbenchmark_1.4-4       rscala_3.1.0-20180729-0155

loaded via a namespace (and not attached):
[1] compiler_3.5.1
> 
> scala()
> nReps <- 10000
> 
> #####
> 
> rng <- s$.new_scala.util.Random()
> rng$nextInt()      # First-time compilation
[1] 48428312
> rng$nextInt(1L)    # First-time compilation
[1] 0
> nextInt <- rng$nextInt
> nextInt()          # Alreary compiled
[1] -2083234442
> nextInt(1L)        # Alreary compiled
[1] 0
> 
> microbenchmark(
+   s(rng=rng) ^ 'rng.nextInt()',
+   s(rng=rng) * 'rng.nextInt()',
+   rng$.nextInt(),
+   rng$nextInt(),
+   nextInt(),
+   rng$.nextInt(100L),
+   rng$nextInt(100L),
+   nextInt(100L),
+   times=nReps
+ )
Unit: microseconds
                           expr     min       lq     mean   median       uq
   s(rng = rng)^"rng.nextInt()" 153.834 178.1060 221.7817 182.1225 185.4355
 s(rng = rng) * "rng.nextInt()" 118.394 138.9330 150.8085 142.8995 145.7380
                 rng$.nextInt() 131.264 145.5260 158.7642 148.6460 151.4750
                  rng$nextInt() 102.282 110.4810 121.4704 113.6335 115.6735
                      nextInt()  91.335 100.3425 109.5636 102.9990 105.7470
             rng$.nextInt(100L) 148.023 167.9125 182.2078 170.9015 173.9970
              rng$nextInt(100L) 111.896 132.2665 143.2271 135.5755 137.8155
                  nextInt(100L) 101.607 122.1010 133.3152 124.9955 127.8665
        max neval
 283906.065 10000
   4063.299 10000
   2165.432 10000
  14591.017 10000
   1977.940 10000
   3919.841 10000
   2012.519 10000
   4147.308 10000
> 
> proc.time()
   user  system elapsed 
  8.104   4.164  16.502 
