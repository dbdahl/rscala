
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> library(microbenchmark)
> 
> cat(system2("hostname",stdout=TRUE),"\n",sep="")
ramah
> scalaConfig()

Read existing configuration file: ~/.rscala/config.R

$format
[1] 2

$osArchitecture
[1] 64

$scalaHome
[1] "/home/dahl/local/scala/scala/scala-2.12.7"

$scalaCmd
[1] "/home/dahl/local/bin/scala"

$scalaMajorVersion
[1] "2.12"

$scalaFullVersion
[1] "2.12.7"

$javaHome
[1] "/home/dahl/local/java/jdk-11"

$javaCmd
[1] "/home/dahl/local/bin/java"

$javaMajorVersion
[1] 11

$javaArchitecture
[1] 64

$sbtCmd
[1] "/usr/bin/sbt"

> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.5 LTS

Matrix products: default
BLAS: /usr/lib/libblas/libblas.so.3.6.0
LAPACK: /usr/lib/lapack/liblapack.so.3.6.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] microbenchmark_1.4-4 rscala_3.2.1        

loaded via a namespace (and not attached):
[1] compiler_3.5.1
> 
> s <- scala()
> nReps <- 10000
> 
> #####
> 
> rng <- s$.new_scala.util.Random()
> rng$nextInt()      # First-time compilation
[1] 1194536642
> rng$nextInt(1L)    # First-time compilation
[1] 0
> nextInt <- rng$nextInt
> nextInt()          # Alreary compiled
[1] 1687257425
> nextInt(1L)        # Alreary compiled
[1] 0
> 
> microbenchmark(
+   s(rng=rng) ^ 'rng.nextInt()',
+   s(rng=rng) * 'rng.nextInt()',
+   rng$.nextInt(),
+   rng$nextInt(),
+   nextInt(),
+   rng$.nextInt(100L),
+   rng$nextInt(100L),
+   nextInt(100L),
+   times=nReps
+ )
Unit: microseconds
                           expr     min       lq     mean   median       uq
   s(rng = rng)^"rng.nextInt()" 154.808 178.0245 213.3540 181.8730 185.5565
 s(rng = rng) * "rng.nextInt()" 118.103 137.3030 150.2879 141.3250 144.6620
                 rng$.nextInt() 135.259 146.2715 162.0415 149.3995 152.7335
                  rng$nextInt() 101.611 111.1625 122.7138 114.1990 116.3210
                      nextInt()  90.009 100.1490 110.2427 102.6000 105.5470
             rng$.nextInt(100L) 146.617 168.2655 184.0773 171.5160 175.1900
              rng$nextInt(100L) 111.334 133.0900 145.7248 135.9460 138.3205
                  nextInt(100L)  99.628 121.7565 133.1525 124.4730 127.4630
        max neval
 192944.406 10000
   5037.804 10000
  15315.621 10000
   3503.496 10000
  17328.527 10000
   2229.696 10000
   4147.319 10000
   2403.711 10000
> 
> proc.time()
   user  system elapsed 
  8.372   4.012  16.269 
