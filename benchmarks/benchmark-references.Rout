
R Under development (unstable) (2018-06-21 r74929) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> library(microbenchmark)
> 
> cat(system2("hostname",stdout=TRUE),"\n",sep="")
sidon
> scalaInfo()

Search details:
    SCALA_HOME environment variable is not set.
    Looking for Scala using PATH environment variable.
    Found 'scala' at /home/dahl/local/scala/scala/scala-2.12.3/bin/scala.

$cmd
[1] "/home/dahl/local/scala/scala/scala-2.12.3/bin/scala"

$fullVersion
[1] "2.12.3"

$majorVersion
[1] "2.12"

> sessionInfo()
R Under development (unstable) (2018-06-21 r74929)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/lib/libblas/libblas.so.3.6.0
LAPACK: /usr/lib/lapack/liblapack.so.3.6.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] microbenchmark_1.4-4       rscala_3.0.0-20180627-2050

loaded via a namespace (and not attached):
[1] compiler_3.6.0
> 
> scala()
> nReps <- 10000
> 
> #####
> 
> rng <- s$.new_scala.util.Random()
> rng$nextInt()      # First-time compilation
[1] -1385503037
> rng$nextInt(1L)    # First-time compilation
[1] 0
> nextInt <- rng$nextInt
> nextInt()          # Alreary compiled
[1] -1881340690
> nextInt(1L)        # Alreary compiled
[1] 0
> 
> microbenchmark(
+   s(rng=rng) ^ 'rng.nextInt()',
+   s(rng=rng) * 'rng.nextInt()',
+   rng$.nextInt(),
+   rng$nextInt(),
+   nextInt(),
+   rng$.nextInt(100L),
+   rng$nextInt(100L),
+   nextInt(100L),
+   times=nReps
+ )
Unit: microseconds
                           expr     min       lq     mean   median       uq
   s(rng = rng)^"rng.nextInt()" 162.128 184.5475 269.2290 212.2800 233.4385
 s(rng = rng) * "rng.nextInt()" 122.999 140.5070 172.9617 167.5440 181.9640
                 rng$.nextInt() 133.369 150.6660 183.6655 172.3400 189.5195
                  rng$nextInt() 100.357 111.7430 140.3814 132.8465 144.8035
                      nextInt()  82.563  99.2540 124.3070 120.3475 130.3575
             rng$.nextInt(100L) 148.254 172.3175 216.6997 198.7800 218.9570
              rng$nextInt(100L) 110.568 132.4220 165.4777 159.5415 173.7320
                  nextInt(100L)  99.356 119.8490 152.1833 146.1430 159.6475
        max neval
 406831.502 10000
   2326.544 10000
   3932.082 10000
   2898.909 10000
   2300.308 10000
  19789.694 10000
   2501.912 10000
   4266.509 10000
> 
> proc.time()
   user  system elapsed 
 10.671   3.569  20.281 
