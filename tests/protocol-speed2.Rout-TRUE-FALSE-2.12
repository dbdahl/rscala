> heap.maximum <- "3G"
> source("common.R",print.eval=TRUE)
# R version 3.4.2 (2017-09-28) # hunter # TRUE # FALSE
> 
> library(help="rscala")

		Information on package ‘rscala’

Description:

Package:              rscala
Type:                 Package
Title:                Bi-Directional Interface Between 'R' and 'Scala'
                      with Callbacks
Version:              2.4.1-614
Date:                 2017-11-17
Authors@R:            person(given="David
                      B.",family="Dahl",role=c("aut","cre"),email="dahl@stat.byu.edu")
URL:                  https://github.com/dbdahl/rscala
BugReports:           https://github.com/dbdahl/rscala/issues
Imports:              utils
SystemRequirements:   Scala (>= 2.11)
Description:          The 'Scala' <http://www.scala-lang.org/>
                      interpreter is embedded in 'R' and callbacks to
                      'R' from the embedded interpreter are supported.
                      Conversely, the 'R' interpreter is embedded in
                      'Scala'. 'Scala' versions in the 2.11.x and
                      2.12.x series are supported.
License:              GPL (>= 2) | BSD_3_clause + file LICENSE
VignetteBuilder:      knitr
Suggests:             knitr, microbenchmark, rJava, xtable
NeedsCompilation:     no
Packaged:             2017-11-17 23:11:08 UTC; dahl
Author:               David B. Dahl [aut, cre]
Maintainer:           David B. Dahl <dahl@stat.byu.edu>
Built:                R 3.4.2; ; 2017-11-17 23:34:32 UTC; unix

Index:

%~%                     Execute Code, Set Values, and Get Values in a
                        Scala Interpreter
close.ScalaInterpreter
                        Closes the Resources of a Scala Interpreter
is.scalaReference       Tests whether an object is a Scala reference.
print.ScalaInterpreter
                        String Representation of a Scala Interpreter,
                        Reference, or Function
rscala-package          Bi-Directional Interface Between R and Scala
                        with Callbacks
scala                   Create an Instance of an Embedded Scala
                        Interpreter
scalaConvert            Convert an R object to a Scala reference.
scalaRequire            Add a JAR to the Classpath of an Existing Scala
                        Instance
scalaSettings           Settings of a Scala Instance
strintrplt              String Interpolation with Arbitrary R Code

Further information is available in the following vignettes in
directory ‘/YShare/dahl/local/R/packages/rscala/doc’:

article: Integration of R and Scala Using rscala (source, pdf)

> 
> func0a <- function(x=matrix(0.0,nrow=10000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1a <- function(x=matrix(0L,nrow=20000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1b <- function(x=matrix(0L,nrow=200,ncol=300)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func2a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func2b <- function(x=integer(60000)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func3a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x.length'
+ }
> 
> func4a <- function(x=integer(0)) {  # 0.228 MB
+   s %!% 'new Array[Int](6000000)'
+ }
> 
> s$a <- 1:6000000
> invisible(s$a)
> rng <- s$.scala.util.Random$new()
> invisible(sapply(1:1000,function(i) rng$nextGaussian()))   # Burn-in
> 
> library(microbenchmark)
> set.seed(13124)
> 
> microbenchmark(
+   rng$nextGaussian(),
+   unit="us",
+   times=2500)
Unit: microseconds
               expr     min       lq     mean   median       uq      max neval
 rng$nextGaussian() 452.734 670.2115 1248.573 1009.026 1149.537 81103.45  2500
> 
> microbenchmark(
+   rng$nextGaussian(),
+   func0a(),
+   func1a(),
+   func1b(),
+   func2a(),
+   func2b(),
+   func3a(),
+   func4a(),
+   s$a <- 1:6000000,
+   s$a,
+   unit="ms",
+   times=25)
Unit: milliseconds
               expr        min         lq       mean     median         uq
 rng$nextGaussian()   0.546459   1.213672   4.082274   1.470202   2.182828
           func0a() 235.706045 381.685992 541.638671 488.372591 631.441113
           func1a() 264.445315 418.824289 669.016963 555.759979 808.248436
           func1b()   2.766694   3.953725   9.715374   5.201435   9.487244
           func2a() 154.033834 207.364340 355.435347 255.601440 537.687405
           func2b()   2.470355   3.176724  41.618056   4.346526  13.106288
           func3a()  50.567965  76.544406 171.092212  93.619578 165.936916
           func4a()  83.061352 140.906962 201.909742 171.613398 187.796017
     s$a <- 1:6e+06 166.471316 259.025008 419.474130 404.863469 508.243731
                s$a 199.117986 284.999649 396.362173 401.862138 493.737467
        max neval
   19.67816    25
 1011.83247    25
 1504.26521    25
   47.64943    25
  726.64105    25
  822.84100    25
 1491.58597    25
  999.08953    25
  704.47460    25
  564.95616    25
> 
> 
