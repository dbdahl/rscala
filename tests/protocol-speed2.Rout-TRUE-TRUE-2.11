> heap.maximum <- "3G"
> source("common.R",print.eval=TRUE)
# R version 3.4.2 (2017-09-28) # hunter # TRUE # TRUE
> 
> library(help="rscala")

		Information on package ‘rscala’

Description:

Package:              rscala
Type:                 Package
Title:                Bi-Directional Interface Between 'R' and 'Scala'
                      with Callbacks
Version:              2.4.1-614
Date:                 2017-11-17
Authors@R:            person(given="David
                      B.",family="Dahl",role=c("aut","cre"),email="dahl@stat.byu.edu")
URL:                  https://github.com/dbdahl/rscala
BugReports:           https://github.com/dbdahl/rscala/issues
Imports:              utils
SystemRequirements:   Scala (>= 2.11)
Description:          The 'Scala' <http://www.scala-lang.org/>
                      interpreter is embedded in 'R' and callbacks to
                      'R' from the embedded interpreter are supported.
                      Conversely, the 'R' interpreter is embedded in
                      'Scala'. 'Scala' versions in the 2.11.x and
                      2.12.x series are supported.
License:              GPL (>= 2) | BSD_3_clause + file LICENSE
VignetteBuilder:      knitr
Suggests:             knitr, microbenchmark, rJava, xtable
NeedsCompilation:     no
Packaged:             2017-11-17 23:11:08 UTC; dahl
Author:               David B. Dahl [aut, cre]
Maintainer:           David B. Dahl <dahl@stat.byu.edu>
Built:                R 3.4.2; ; 2017-11-17 23:34:32 UTC; unix

Index:

%~%                     Execute Code, Set Values, and Get Values in a
                        Scala Interpreter
close.ScalaInterpreter
                        Closes the Resources of a Scala Interpreter
is.scalaReference       Tests whether an object is a Scala reference.
print.ScalaInterpreter
                        String Representation of a Scala Interpreter,
                        Reference, or Function
rscala-package          Bi-Directional Interface Between R and Scala
                        with Callbacks
scala                   Create an Instance of an Embedded Scala
                        Interpreter
scalaConvert            Convert an R object to a Scala reference.
scalaRequire            Add a JAR to the Classpath of an Existing Scala
                        Instance
scalaSettings           Settings of a Scala Instance
strintrplt              String Interpolation with Arbitrary R Code

Further information is available in the following vignettes in
directory ‘/YShare/dahl/local/R/packages/rscala/doc’:

article: Integration of R and Scala Using rscala (source, pdf)

> 
> func0a <- function(x=matrix(0.0,nrow=10000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1a <- function(x=matrix(0L,nrow=20000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1b <- function(x=matrix(0L,nrow=200,ncol=300)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func2a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func2b <- function(x=integer(60000)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func3a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x.length'
+ }
> 
> func4a <- function(x=integer(0)) {  # 0.228 MB
+   s %!% 'new Array[Int](6000000)'
+ }
> 
> s$a <- 1:6000000
> invisible(s$a)
> rng <- s$.scala.util.Random$new()
> invisible(sapply(1:1000,function(i) rng$nextGaussian()))   # Burn-in
> 
> library(microbenchmark)
> set.seed(13124)
> 
> microbenchmark(
+   rng$nextGaussian(),
+   unit="us",
+   times=2500)
Unit: microseconds
               expr    min       lq     mean   median       uq      max neval
 rng$nextGaussian() 585.63 1012.156 2182.808 1115.728 1248.087 67445.58  2500
> 
> microbenchmark(
+   rng$nextGaussian(),
+   func0a(),
+   func1a(),
+   func1b(),
+   func2a(),
+   func2b(),
+   func3a(),
+   func4a(),
+   s$a <- 1:6000000,
+   s$a,
+   unit="ms",
+   times=25)
Unit: milliseconds
               expr        min         lq       mean     median          uq
 rng$nextGaussian()   0.883243   1.126573   3.192250   1.446371    1.875895
           func0a() 322.037125 498.304515 633.578168 639.313467  745.903503
           func1a() 507.521354 706.078609 875.514646 867.542552 1019.301616
           func1b()   2.442458   3.739338   8.605977   5.044319    7.142664
           func2a() 214.519958 261.288048 324.941621 301.361503  379.336036
           func2b()   2.367965   3.141301  29.060960   3.642491    5.368570
           func3a()  56.469282  77.953104 124.904302  95.028547  114.559214
           func4a() 128.761680 150.205224 235.088312 190.467237  248.413085
     s$a <- 1:6e+06 190.835858 230.959447 310.867589 279.239883  319.758354
                s$a 205.888034 233.484650 290.689120 270.057056  305.820382
        max neval
   26.72600    25
 1093.30084    25
 1451.98531    25
   39.43108    25
  601.35961    25
  596.30365    25
  612.26329    25
  746.33834    25
  672.36706    25
  518.96710    25
> 
> 
