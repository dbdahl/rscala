> source("common.R",print.eval=TRUE)
# R version 3.4.2 (2017-09-28) # hilton # TRUE # FALSE
> 
> 
> test <- function(a,value,func=list()) {
+   a$tmp <- value
+   tmp <- a$tmp
+   if ( length(func) > 0 ) {
+     if ( ! is.list(func) ) func <- list(func)
+     for ( f in func ) {
+       if ( ! f(tmp) ) return(FALSE)
+     }
+   }
+   if ( class(tmp) != class(value) ) return(FALSE)
+   if ( length(tmp) != length(value) ) return(FALSE)
+   if ( any(tmp != value) ) return(FALSE)
+   TRUE
+ }
> 
> assertAll <- function(interpreter) {
+   a <- interpreter
+   assert <- function(x) {
+     if ( ! x ) stop("Assertion not true.")
+   }
+   assert(test(a,"Lisa"))
+   assert(test(a,c("Lisa","Susan","Grace","Evalyn")))
+   assert(test(a,matrix(c("a","b","c","d","e","f"),nrow=3)))
+   assert(test(a,1))
+   assert(test(a,c(1,2,3,4)))
+   assert(test(a,matrix(c(1,2,3,4,5,6),nrow=3)))
+   assert(test(a,TRUE))
+   assert(test(a,as.integer(c(TRUE,FALSE))))
+   assert(test(a,matrix(c(TRUE,TRUE,FALSE,TRUE,FALSE,TRUE),nrow=3)))
+   assert(test(a,1L))
+   assert(test(a,as.integer(c(1,2,3,4))))
+   assert(test(a,matrix(as.integer(c(1,2,3,4,5,6)),nrow=3)))
+ }
> 
> 
> assertAll(s)
> 
> 
> # Tests of static typing in Scala
> s$b <- matrix(1L:12L,ncol=3)
> s %~% "println(b(1)(2))"
10
> s$b <- matrix(c(FALSE,TRUE),ncol=2)
> s %~% "println(b(0)(1))"
true
> s$b <- seq(0,1,length=5)
> s %~% "println(b(3))"
0.75
> s$b <- FALSE
> s %~% "println(!b)"
true
> 
> # What about when there is no result?
> tryCatch(s %~% 'import scala.util._', error=function(e) e)
java.lang.RuntimeException: There is no result.  Maybe use the %@% operator instead?
	at org.ddahl.rscala.server.ScalaServer.mostRecentVar(ScalaServer.scala:56)
	at org.ddahl.rscala.server.ScalaServer.doGet(ScalaServer.scala:223)
	at org.ddahl.rscala.server.ScalaServer.org$ddahl$rscala$server$ScalaServer$$heart(ScalaServer.scala:424)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(ScalaServer.scala:449)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply(ScalaServer.scala:449)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply(ScalaServer.scala:449)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.Console$.withErr(Console.scala:167)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1.apply$mcV$sp(ScalaServer.scala:448)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1.apply(ScalaServer.scala:448)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1.apply(ScalaServer.scala:448)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.Console$.withOut(Console.scala:126)
	at org.ddahl.rscala.server.ScalaServer.run(ScalaServer.scala:447)
	at org.ddahl.rscala.server.Main$delayedInit$body.apply(Main.scala:18)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:40)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:71)
	at scala.App$$anonfun$main$1.apply(App.scala:71)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:32)
	at scala.App$class.main(App.scala:71)
	at org.ddahl.rscala.server.Main$.main(Main.scala:3)
	at org.ddahl.rscala.server.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.tools.nsc.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:71)
	at scala.tools.nsc.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:139)
	at scala.tools.nsc.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:71)
	at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:139)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:28)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:45)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:35)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:45)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:74)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:96)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:105)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
java.lang.RuntimeException: There is no result.  Maybe use the %@% operator instead?
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Exception thrown.>
> s %~% "5+4"
[1] 9
> s %@% 'import scala.util._'
> 
> tryCatch(s %.~% 'import scala.util._', error=function(e) e)
java.lang.RuntimeException: There is no result.  Maybe use the %@% operator instead?
	at org.ddahl.rscala.server.ScalaServer.mostRecentVar(ScalaServer.scala:56)
	at org.ddahl.rscala.server.ScalaServer.liftedTree1$1(ScalaServer.scala:387)
	at org.ddahl.rscala.server.ScalaServer.doGetReference(ScalaServer.scala:386)
	at org.ddahl.rscala.server.ScalaServer.org$ddahl$rscala$server$ScalaServer$$heart(ScalaServer.scala:426)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(ScalaServer.scala:449)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply(ScalaServer.scala:449)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply(ScalaServer.scala:449)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.Console$.withErr(Console.scala:167)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1.apply$mcV$sp(ScalaServer.scala:448)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1.apply(ScalaServer.scala:448)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1.apply(ScalaServer.scala:448)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.Console$.withOut(Console.scala:126)
	at org.ddahl.rscala.server.ScalaServer.run(ScalaServer.scala:447)
	at org.ddahl.rscala.server.Main$delayedInit$body.apply(Main.scala:18)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:40)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:71)
	at scala.App$$anonfun$main$1.apply(App.scala:71)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:32)
	at scala.App$class.main(App.scala:71)
	at org.ddahl.rscala.server.Main$.main(Main.scala:3)
	at org.ddahl.rscala.server.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.tools.nsc.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:71)
	at scala.tools.nsc.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:139)
	at scala.tools.nsc.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:71)
	at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:139)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:28)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:45)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:35)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:45)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:74)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:96)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:105)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
java.lang.RuntimeException: There is no result.  Maybe use the %@% operator instead?
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Exception thrown.>
> s %~% "3+4"
[1] 7
> s %@% 'import scala.util._'
> 
> # Close
> close(s)
> rm(s)
> 
> 
