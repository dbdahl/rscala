#!/bin/bash

if [[ "$1" == "--install" ]]
then
  DOINSTALL=TRUE
  shift
fi

if [[ $# -eq 0 ]]
then
  DOALL=TRUE
  SCRIPTS="basics.R callbacks.R callbacks-benchmarked.R defs.R functions.R identifiers.R interpolate.R io.R memory.R mistakes.R protocol-speed.scala protocol-speed2.R recursion.R rinscala-rowmajor.scala rinscala-columnmajor.scala rowmajor.R threadsafe.scala unit-testing.R port.R"
else
  DOALL=FALSE
  SCRIPTS="$*"
fi

export VERSIONS=$(cat ../build.sbt | grep crossScalaVersions | sed 's/crossScalaVersions\s*:=\s*Seq(//' | sed 's/)//g' | sed 's/,//g' | sed 's/"//g')
export SERIALIZES="TRUE FALSE"
export OUTPUTS="TRUE FALSE"

export VERSIONS=2.12.4
export SERIALIZES=FALSE
export OUTPUTS=TRUE

if [[ "$DOINSTALL" == TRUE ]]
then
  echo "Testing installation."
  ./scala-info >| scala-info.out 2>&1
fi

dq stop
dq start

(
for SCALA_VERSION in $VERSIONS
do
  SCALA_VERSION_MAJOR=$(echo $SCALA_VERSION | sed 's/\.[^.]*$//')
  # echo "Running battery for $SCALA_VERSION"
  SCALA_HOME=~/.rscala/scala-$SCALA_VERSION
  for script in $SCRIPTS
  do
    # echo "  Running $script"
    for SERIALIZE in $SERIALIZES
    do
      for OUTPUT in $OUTPUTS
      do
        EXT=$([[ "$script" = *.* ]] && echo ".${script##*.}" || echo '')
        if [[ "$EXT" == .R ]]
        then
          echo "SCALA_HOME=$SCALA_HOME RSCALA_SCALA_VERSION=$SCALA_VERSION RSCALA_OUTPUT=$OUTPUT RSCALA_SERIALIZE=$SERIALIZE R CMD BATCH --quiet --no-timing --no-restore --no-save $script ${script}out-$SERIALIZE-$OUTPUT-$SCALA_VERSION_MAJOR"
        elif [[ "$EXT" == .scala || "$EXT" == "" ]]
        then
          echo "SCALA_HOME=$SCALA_HOME RSCALA_SCALA_VERSION=$SCALA_VERSION RSCALA_OUTPUT=$OUTPUT RSCALA_SERIALIZE=$SERIALIZE ./$script >| $script.out-$SERIALIZE-$OUTPUT-$SCALA_VERSION_MAJOR 2>&1"
        fi
      done
    done
  done
done
) | dq push

dq pop $(Rscript -e "cat($(nproc)/2)")

