> heap.maximum <- "3G"
> source("common.R",print.eval=TRUE)
# R version 3.4.2 (2017-09-28) # hunter # FALSE # FALSE
> 
> library(help="rscala")

		Information on package ‘rscala’

Description:

Package:              rscala
Type:                 Package
Title:                Bi-Directional Interface Between 'R' and 'Scala'
                      with Callbacks
Version:              2.4.1-614
Date:                 2017-11-17
Authors@R:            person(given="David
                      B.",family="Dahl",role=c("aut","cre"),email="dahl@stat.byu.edu")
URL:                  https://github.com/dbdahl/rscala
BugReports:           https://github.com/dbdahl/rscala/issues
Imports:              utils
SystemRequirements:   Scala (>= 2.11)
Description:          The 'Scala' <http://www.scala-lang.org/>
                      interpreter is embedded in 'R' and callbacks to
                      'R' from the embedded interpreter are supported.
                      Conversely, the 'R' interpreter is embedded in
                      'Scala'. 'Scala' versions in the 2.11.x and
                      2.12.x series are supported.
License:              GPL (>= 2) | BSD_3_clause + file LICENSE
VignetteBuilder:      knitr
Suggests:             knitr, microbenchmark, rJava, xtable
NeedsCompilation:     no
Packaged:             2017-11-17 23:11:08 UTC; dahl
Author:               David B. Dahl [aut, cre]
Maintainer:           David B. Dahl <dahl@stat.byu.edu>
Built:                R 3.4.2; ; 2017-11-17 23:34:32 UTC; unix

Index:

%~%                     Execute Code, Set Values, and Get Values in a
                        Scala Interpreter
close.ScalaInterpreter
                        Closes the Resources of a Scala Interpreter
is.scalaReference       Tests whether an object is a Scala reference.
print.ScalaInterpreter
                        String Representation of a Scala Interpreter,
                        Reference, or Function
rscala-package          Bi-Directional Interface Between R and Scala
                        with Callbacks
scala                   Create an Instance of an Embedded Scala
                        Interpreter
scalaConvert            Convert an R object to a Scala reference.
scalaRequire            Add a JAR to the Classpath of an Existing Scala
                        Instance
scalaSettings           Settings of a Scala Instance
strintrplt              String Interpolation with Arbitrary R Code

Further information is available in the following vignettes in
directory ‘/YShare/dahl/local/R/packages/rscala/doc’:

article: Integration of R and Scala Using rscala (source, pdf)

> 
> func0a <- function(x=matrix(0.0,nrow=10000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1a <- function(x=matrix(0L,nrow=20000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1b <- function(x=matrix(0L,nrow=200,ncol=300)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func2a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func2b <- function(x=integer(60000)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func3a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x.length'
+ }
> 
> func4a <- function(x=integer(0)) {  # 0.228 MB
+   s %!% 'new Array[Int](6000000)'
+ }
> 
> s$a <- 1:6000000
> invisible(s$a)
> rng <- s$.scala.util.Random$new()
> invisible(sapply(1:1000,function(i) rng$nextGaussian()))   # Burn-in
> 
> library(microbenchmark)
> set.seed(13124)
> 
> microbenchmark(
+   rng$nextGaussian(),
+   unit="us",
+   times=2500)
Unit: microseconds
               expr     min       lq     mean  median       uq      max neval
 rng$nextGaussian() 355.811 736.1345 1334.185 911.725 1002.524 77268.39  2500
> 
> microbenchmark(
+   rng$nextGaussian(),
+   func0a(),
+   func1a(),
+   func1b(),
+   func2a(),
+   func2b(),
+   func3a(),
+   func4a(),
+   s$a <- 1:6000000,
+   s$a,
+   unit="ms",
+   times=25)
Unit: milliseconds
               expr        min         lq       mean     median         uq
 rng$nextGaussian()   0.600523   0.881568  66.288405   1.190590  15.451545
           func0a() 306.814856 417.792566 563.336280 525.163320 655.133885
           func1a() 306.011126 390.082307 683.642317 630.828694 811.574098
           func1b()   2.943163   3.477558   6.014701   4.151541   4.934147
           func2a() 161.313447 204.363401 343.873755 293.789592 354.324424
           func2b()   2.293766   2.804848  93.231815   4.574065   7.335355
           func3a()  57.791097  86.502108 237.800961 122.811064 236.019012
           func4a()  92.152985 128.342559 211.716409 168.004350 224.751434
     s$a <- 1:6e+06  41.217050  50.700830 118.702028  59.640013  94.939282
                s$a 175.790979 241.821374 400.609547 389.859299 485.856059
        max neval
  395.03740    25
 1020.83900    25
 1469.39426    25
   20.39562    25
 1318.00087    25
 1025.50352    25
 1846.92382    25
  645.03117    25
  559.79557    25
 1318.73575    25
> 
> 
