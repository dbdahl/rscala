> jars <- c("commons-math3-3.2.jar","shallot.jar")
> source("common.R",print.eval=TRUE)
# R version 3.4.2 (2017-09-28) # hunter # FALSE # FALSE
> 
> tryCatch(s %~% 'new org.apache.commons.math3.random.EmpiricalDistribution()',error=function(e) e)   # Scala 2.11.x class loader is weird.  This line avoid subsequent problems.
ScalaInterpreterReference... res1: org.apache.commons.math3.random.EmpiricalDistribution
> 
> 
> rscala:::scalap(s,"org.apache.commons.math3.random.RandomDataGenerator")
> s$.org.apache.commons.math3.random.RandomDataGenerator
ScalaInterpreterItem for org.apache.commons.math3.random.RandomDataGenerator
> rdg <- s$.org.apache.commons.math3.random.RandomDataGenerator$new()
> 
> rdg$reSeed(39234L)
> rexp <- rdg$nextExponential(2,.EVALUATE=FALSE)
> 
> library(microbenchmark)
> options(width=120)
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr     min       lq     mean   median       uq       max neval
 rdg$nextExponential(4) 521.167 758.9760 1800.422 988.9040 1284.519 650423.87  1000
                rexp(4) 329.665 501.9075  757.704 649.5145  842.205  15375.62  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr     min       lq      mean   median       uq      max neval
 rdg$nextExponential(4) 521.913 678.7685 1036.4085 897.8440 1183.006 16705.91  1000
                rexp(4) 338.551 443.8440  654.5849 583.7145  775.313 22251.92  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr     min       lq      mean   median       uq       max neval
 rdg$nextExponential(4) 487.331 869.6850 1471.8977 1073.549 1282.358 114290.16  1000
                rexp(4) 311.290 570.2055  904.3195  700.070  848.636  32021.26  1000
> 
> s$.org.ddahl.shallot.parameter.Mass
ScalaInterpreterItem for org.ddahl.shallot.parameter.Mass
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(1.0,3.0,rdg)
> s %~% "3+4"
[1] 7
> 
> mass <- s$.org.ddahl.shallot.parameter.Mass$apply(3.4)
> massFactory1 <- s$.org.ddahl.shallot.parameter.Mass$factory(mass)
> massFactory2 <- s$.org.ddahl.shallot.parameter.Mass$factory(3.0)
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(1.0,3.0,rdg)
> massFactory3$apply()$logValue()
[1] -2.27295
> massFactory3$apply()$logValue()
[1] -3.893189
> massFactory3$apply()$logValue()
[1] -2.183371
> 
> 
> 
> s %@% '
+ class Bob {
+ 
+   val a = 3.0
+   var b = 4.0
+ 
+   def sum(c: Int) = { a + b + c }
+ 
+ }
+ '
> 
> d <- s$.Bob$new()
> d[['type']]  # The weird 'iw$' prepended to 'Bob' is automatically removed
[1] "Bob"
> d$b()
[1] 4
> 
> d$sum(4L)
[1] 11
> m <- d$sum(5L,.EVALUATE=FALSE)
> 
> m(3)                                                   # Casting is not necessary here
[1] 10
> d$sum(as.integer(3))                                   # But it is here
[1] 10
> 
> 
