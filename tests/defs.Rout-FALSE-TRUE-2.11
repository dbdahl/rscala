> source("common.R",print.eval=TRUE)
# R version 3.4.2 (2017-09-28) # hunter # FALSE # TRUE
> 
> 
> ####
> 
> 
> rng1 <- s %.~% "new scala.util.Random"
> rng1$nextDouble()
[1] 0.4660691
> 
> s$r1 <- rng1
> rng2 <- s$r1
> rng2$nextDouble()
[1] 0.4389618
> 
> rng3 <- s$.scala.util.Random$new()
> rng3$nextDouble()
[1] 0.1957354
> 
> s$r3 <- rng3
> rng4 <- s$r3
> rng4$nextDouble()
[1] 0.9189127
> 
> f <- rng4$nextDouble(.EVALUATE=FALSE)
> f()
[1] 0.133736
> 
> 
> ####
> 
> 
> see <- "David"
> mkFunc1 <- function() {
+   see <- "B."
+   x <- "Milly"
+   print(environment())
+   r <- function(x1="Mack",x2="Bob") s %!% '
+     x1+" "+x2+" "+R.getS0("see")
+   '
+   r
+ }
> y1 <- mkFunc1()
<environment: 0x2aaed38>
> identical(y1("Lisa","Dahl"),"Lisa Dahl B.")
[1] TRUE
> 
> 
> mkFunc2 <- function() {
+   see <- "MMMM."
+   x <- "Milly"
+   r <- function(x="Mack",y="Bob") s %.!% '
+       x+" "+y+" "+R.getS0("see")
+   '
+   r
+ }
> y2 <- mkFunc2()
> identical(y2("Lisa","Dahl")$toString(),"Lisa Dahl MMMM.")
[1] TRUE
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 337105 18.1     592000 31.7   460000 24.6
Vcells 624139  4.8    1213341  9.3  1043103  8.0
> 
> 
> 
> func1 <- function() {
+   see <- "Knudsen"
+   y1("Lisa","Dahl")
+ }
> identical(func1(),"Lisa Dahl B.")
[1] TRUE
> 
> 
> ####
> 
> 
> # Realistic timing
> system.time({
+   e <- function(x=0,y=4L,name="dog") s %!% '
+     name + " " + ( x + y )
+   '
+ })
   user  system elapsed 
      0       0       0 
> 
> # Taking advantage of caching
> system.time({
+   f <- function(x=0,y=4L,name="dog") s %!% '
+     name + " " + ( x + y )
+   '
+ })
   user  system elapsed 
      0       0       0 
> 
> ####
> 
> nextDouble <- function(rng=s$null("scala.util.Random")) s %!% "rng.nextDouble()"
> 
> mkRNG1 <- function() s %.!% 'new scala.util.Random()'
> mkRNG2 <- function() s %.~% 'new scala.util.Random()'
> 
> rng1 <- mkRNG1()
> rng2 <- mkRNG2()
> 
> rng1$nextInt(10L)
[1] 1
> rng2$nextInt(10L)
[1] 5
> 
> str <- rng1$toString(.AS.REFERENCE=TRUE)
> str$length()
[1] 25
> 
> nd0 <- rng1$nextDouble(.EVALUATE=FALSE)
> nd1 <- function() s %!% 'R.cached("@{toString(rng1)}").asInstanceOf[@{rng1[[\'type\']]}].nextDouble()'
> nd2 <- function() s %!% '@{rng2}.nextDouble()'
> 
> library("microbenchmark")
> 
> microbenchmark(
+   runif(1),
+   rng1$nextDouble(),
+   rng2$nextDouble(),
+   nd0(),
+   nd1(),
+   nd2(),
+   times=500
+ )
Unit: microseconds
              expr     min       lq       mean    median       uq        max
          runif(1)   1.919   8.2265   13.08926   12.7085   15.285    601.621
 rng1$nextDouble() 481.428 671.8190 1187.39150  937.8185 1030.604  29738.842
 rng2$nextDouble() 456.358 633.0620 1857.60851  888.9535  984.695 359960.930
             nd0() 243.444 414.3605  864.77674  582.0285  637.438  34918.972
             nd1() 683.555 979.4285 2263.11672 1302.7425 1417.280 281758.577
             nd2() 577.335 886.6355 1941.03307 1110.1955 1228.932 292647.701
 neval
   500
   500
   500
   500
   500
   500
> 
> ####
> 
> f <- function(x=4) {
+   if ( x < 0 ) stop("'x' must be positive")
+   if ( x == 0 ) x <- 10
+   s %!% '2*x'
+ }
> 
> f(4)
[1] 8
> tryCatch(f(-3), error=function(e) e)
<simpleError in f(-3): 'x' must be positive>
> f(0)
[1] 20
> 
> h <- function(x=4) {
+   if ( x < 0 ) stop("'x' must be positive")
+   if ( x == 0 ) x <- 10
+   s %~% '2*R.getD0("x")'
+ }
> 
> h(4)
[1] 8
> tryCatch(h(-3), error=function(e) e)
<simpleError in h(-3): 'x' must be positive>
> h(0)
[1] 20
> 
> microbenchmark(
+   f(4),
+   h(4),        # h is *slow* and it has the memory leak inherent in Scala's REPL.
+   times=100)
Unit: microseconds
 expr       min         lq       mean    median         uq       max neval
 f(4)   868.491   1172.576   3162.545   1365.45   1902.889  35596.46   100
 h(4) 84854.605 150771.313 207306.219 196987.05 229404.337 682860.22   100
> 
> 
> 
> 
> ####
> 
> s$.scala.util.Random$nextDouble()
[1] 0.02426623
> m <- s$.scala.util.Random$new(342L,.EVALUATE=FALSE)
> m(23436)$nextDouble()
[1] 0.8011135
> m(63502)$nextDouble()
[1] 0.1435077
> m(93222)$nextDouble()
[1] 0.4889048
> m(93222)$nextDouble()
[1] 0.4889048
> 
> n <- m(5)$nextDouble(.EVALUATE=FALSE)
> n()
[1] 0.7305199
> n()
[1] 0.08825841
> n()
[1] 0.4889045
> 
> s$'.Array[Int]'$new(5L)
[1] 0 0 0 0 0
> 
> ####
> 
> s$a <- 1:10
> a <- s$.a
> a$apply(3L)
[1] 4
> 
> s$.scala.util.Random$nextDouble()
[1] 0.9726511
> s$.scala.util.Random$nextDouble()
[1] 0.09156888
> 
> s %@% 'import scala.util.Random'
> s$.Random$nextDouble()
[1] 0.1471052
> 
> a <- function() s %!% 'Random.nextDouble'
> a()
[1] 0.3204788
> 
> a <- s$.scala.util.Random
> a$nextDouble()
[1] 0.2257577
> 
> b <- ( function() s %!% 'scala.util.Random' )()
> b$nextDouble()
[1] 0.8121571
> 
> microbenchmark(
+   a$nextDouble(),
+   b$nextDouble(),
+   times=1000
+   )
Unit: microseconds
           expr     min       lq     mean   median       uq      max neval
 a$nextDouble() 467.033 826.7160 1171.004 906.1520  981.493 44032.87  1000
 b$nextDouble() 482.715 858.3805 1110.156 943.0635 1008.036 26941.60  1000
>   
> 
> ####
> 
> f <- function(x, wantNull=TRUE) s %.!% '
+   val r = R.getReference(x)
+   if ( wantNull ) null else r
+ '
> 
> a <- f(II(1:10), FALSE)
> a$name()
[1] "dnxJVWq5"
> 
> g <- function(func, y=scalaNull("PersistentReference")) s %!% '
+   R.invoke(func,y)
+ '
> 
> g(print, a)
 [1]  1  2  3  4  5  6  7  8  9 10
> 
> 
> ####
> 
> f <- function(x=scalaNull("(Int,Int)")) s %!% 'x._1 + x._2'
> g <- s %~% "(300,400)"
> f(g)
[1] 700
> f(s %.~% "(30,40)")
[1] 70
> 
> f2 <- function() s %~% 'println("Yes")'
> f2()
Yes
> capture.output(f2())
Yes
character(0)
> 
> a <- s %.~% "(300,234)"
> f1 <- function(x=scalaNull("(Int,Int)"),y=numeric()) s %!% 'x._1 + x._2 + y.sum'
> f1(a,c(2,3,4,6))
[1] 549
> 
> f1 <- function(x=scalaNull("(Int,Int)"),y=scalaNull("Array[Double]")) s %!% 'x._1 + x._2 + y.sum'
> b <- s %.~% "Array[Double](2,3,4,5)"
> f1(a,b)
[1] 548
> 
> ####
> 
> (function() s %!% 'println("Yes")')()
Yes
> (function() s %!% '0')()
[1] 0
> (function() s %!% 'null')()
> 
> ####
> 
> tryCatch((function() s %!% 'a+b')(),error = function(e) e)
<console>:16: error: not found: value b
       a+b
         ^
<simpleError in scalaDef(interpreter, snippet, NA): Problem defining function.>
> tryCatch((function() s %!% 'a+')(),error = function(e) e)
<console>:16: error: missing argument list for method + in class any2stringadd
Unapplied methods are only converted to functions when a function type is expected.
You can make this conversion explicit by writing `$plus _` or `$plus(_)` instead of `$plus`.
       a+
        ^
<simpleError in scalaDef(interpreter, snippet, NA): Problem defining function.>
> tryCatch((function() s %!% 'import org.asdfad')(),error = function(e) {e})
<console>:15: error: object asdfad is not a member of package org
       import org.asdfad
              ^
<simpleError in scalaDef(interpreter, snippet, NA): Problem defining function.>
> tryCatch((function() s %!% 'throw new RuntimeException()')(),error = function(e) {e})
java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.server.ScalaServer.doInvoke(ScalaServer.scala:143)
	at org.ddahl.rscala.server.ScalaServer.org$ddahl$rscala$server$ScalaServer$$heart(ScalaServer.scala:447)
	at org.ddahl.rscala.server.ScalaServer.run(ScalaServer.scala:474)
	at org.ddahl.rscala.server.Main$.delayedEndpoint$org$ddahl$rscala$server$Main$1(Main.scala:18)
	at org.ddahl.rscala.server.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:35)
	at scala.App$class.main(App.scala:76)
	at org.ddahl.rscala.server.Main$.main(Main.scala:3)
	at org.ddahl.rscala.server.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)
	at scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
Caused by: java.lang.RuntimeException
	at $line312.$read$$iw$$iw$$anonfun$1.apply(<console>:15)
	at $line312.$read$$iw$$iw$$anonfun$1.apply(<console>:14)
	... 35 more
java.lang.reflect.InvocationTargetException
java.lang.RuntimeException
<simpleError in scalaDef(interpreter, snippet, NA): Problem invoking function.>
> s %~% "5+6"   # Everything's still okay!
[1] 11
> 
> 
