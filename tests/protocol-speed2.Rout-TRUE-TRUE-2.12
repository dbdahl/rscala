> heap.maximum <- "3G"
> source("common.R",print.eval=TRUE)
# R version 3.4.2 (2017-09-28) # hunter # TRUE # TRUE
> 
> library(help="rscala")

		Information on package ‘rscala’

Description:

Package:              rscala
Type:                 Package
Title:                Bi-Directional Interface Between 'R' and 'Scala'
                      with Callbacks
Version:              2.4.1-614
Date:                 2017-11-17
Authors@R:            person(given="David
                      B.",family="Dahl",role=c("aut","cre"),email="dahl@stat.byu.edu")
URL:                  https://github.com/dbdahl/rscala
BugReports:           https://github.com/dbdahl/rscala/issues
Imports:              utils
SystemRequirements:   Scala (>= 2.11)
Description:          The 'Scala' <http://www.scala-lang.org/>
                      interpreter is embedded in 'R' and callbacks to
                      'R' from the embedded interpreter are supported.
                      Conversely, the 'R' interpreter is embedded in
                      'Scala'. 'Scala' versions in the 2.11.x and
                      2.12.x series are supported.
License:              GPL (>= 2) | BSD_3_clause + file LICENSE
VignetteBuilder:      knitr
Suggests:             knitr, microbenchmark, rJava, xtable
NeedsCompilation:     no
Packaged:             2017-11-17 23:11:08 UTC; dahl
Author:               David B. Dahl [aut, cre]
Maintainer:           David B. Dahl <dahl@stat.byu.edu>
Built:                R 3.4.2; ; 2017-11-17 23:34:32 UTC; unix

Index:

%~%                     Execute Code, Set Values, and Get Values in a
                        Scala Interpreter
close.ScalaInterpreter
                        Closes the Resources of a Scala Interpreter
is.scalaReference       Tests whether an object is a Scala reference.
print.ScalaInterpreter
                        String Representation of a Scala Interpreter,
                        Reference, or Function
rscala-package          Bi-Directional Interface Between R and Scala
                        with Callbacks
scala                   Create an Instance of an Embedded Scala
                        Interpreter
scalaConvert            Convert an R object to a Scala reference.
scalaRequire            Add a JAR to the Classpath of an Existing Scala
                        Instance
scalaSettings           Settings of a Scala Instance
strintrplt              String Interpolation with Arbitrary R Code

Further information is available in the following vignettes in
directory ‘/YShare/dahl/local/R/packages/rscala/doc’:

article: Integration of R and Scala Using rscala (source, pdf)

> 
> func0a <- function(x=matrix(0.0,nrow=10000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1a <- function(x=matrix(0L,nrow=20000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1b <- function(x=matrix(0L,nrow=200,ncol=300)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func2a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func2b <- function(x=integer(60000)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func3a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x.length'
+ }
> 
> func4a <- function(x=integer(0)) {  # 0.228 MB
+   s %!% 'new Array[Int](6000000)'
+ }
> 
> s$a <- 1:6000000
> invisible(s$a)
> rng <- s$.scala.util.Random$new()
> invisible(sapply(1:1000,function(i) rng$nextGaussian()))   # Burn-in
> 
> library(microbenchmark)
> set.seed(13124)
> 
> microbenchmark(
+   rng$nextGaussian(),
+   unit="us",
+   times=2500)
Unit: microseconds
               expr     min      lq     mean   median       uq      max neval
 rng$nextGaussian() 446.597 653.625 1137.227 1007.746 1163.773 93148.92  2500
> 
> microbenchmark(
+   rng$nextGaussian(),
+   func0a(),
+   func1a(),
+   func1b(),
+   func2a(),
+   func2b(),
+   func3a(),
+   func4a(),
+   s$a <- 1:6000000,
+   s$a,
+   unit="ms",
+   times=25)
Unit: milliseconds
               expr        min         lq       mean     median         uq
 rng$nextGaussian()   0.677035   1.116681   1.287143   1.329154   1.412529
           func0a() 228.703452 382.717898 512.705789 441.504620 627.926251
           func1a() 252.084420 324.129606 592.168017 521.587962 834.485939
           func1b()   2.672807   3.545380   4.999935   4.664009   5.495615
           func2a() 130.080748 186.228361 324.227854 271.009175 390.271719
           func2b()   2.248567   3.051792  36.539421   3.348746   3.891494
           func3a()  45.890697  63.432150 170.793354  82.023136 104.614461
           func4a() 115.302840 136.840433 202.581751 161.408586 190.069095
     s$a <- 1:6e+06 141.917665 279.155390 400.418457 367.889646 462.104694
                s$a 170.563371 241.602638 363.498710 372.991011 415.427191
         max neval
    1.796086    25
 1079.501711    25
 1430.264005    25
    9.883572    25
  923.109551    25
  796.074915    25
 1499.434650    25
  988.246412    25
  875.322930    25
  797.604066    25
> 
> 
